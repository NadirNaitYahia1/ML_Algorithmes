# -*- coding: utf-8 -*-
"""Knn.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FrKTKRg_hAPjPVZ_URIk425kK8T8kh0o

### **Algo**
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from collections import Counter


def ecludien_distance(x1,x2):
  return np.sqrt(np.sum(x1-x2)**2)

class knn :
  def __init__(self,k):
    self.k = k

  def fit(self,x_train,y_train):
    self.x_train = x_train
    self.y_train = y_train

  def predict(self,x1):
    distances = [ ecludien_distance(x1,x2) for x2 in self.x_train]
    k_indices = np.argsort(distances)[:self.k]
    k_nearest_label  = [self.y_train[i] for i in k_indices]
    most_common = Counter(k_nearest_label).most_common()[0][0]
    return most_common

"""### **Dataset**"""

np.random.seed(0)
X = np.random.rand(100, 2)
y = (X[:, 0] + X[:, 1] > 1).astype(int)
plt.scatter(X[y == 0][:, 0], X[y == 0][:, 1], color='blue', label='Class 0')
plt.scatter(X[y == 1][:, 0], X[y == 1][:, 1], color='red', label='Class 1')
plt.xlabel('x1')
plt.ylabel('x2')
plt.legend()
plt.title('Synthetic Dataset')
plt.show()

"""### **Test**"""

model = knn(k=3)
model.fit(X,y)
prediction = model.predict(np.asarray([0.2, 0.4]))
print(prediction)